version: '3.8'

services:
  reverse-proxy:
    image: traefik:v3.1
    restart: unless-stopped
    command:
#      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
#      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.kc.address=:8080"
#      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
#      - "--certificatesresolvers.myresolver.acme.email=ailushyk@gmail.com"
#      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
#      - "--entryPoints.websecure.http.tls.certResolver=myresolver"
#      - "--entryPoints.kc.http.tls.certResolver=myresolver"
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      - "letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - kc_network

  whoami:
    image: "traefik/whoami"
    container_name: whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"
      - "traefik.http.routers.whoami.entrypoints=web"
    networks:
      - kc_network

  api:
    container_name: api-server
    build:
      context: .
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api_http.rule=Host(`api.localhost`)"
      - "traefik.http.routers.api_http.entrypoints=web"

    volumes:
      - ./:/app
      - /app/node_modules
    environment:
      DATABASE_HOST: db
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_DB: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    depends_on:
      - db
    networks:
      - kc_network

  db:
    image: postgres:16.3-alpine
    container_name: api-server-db
    restart: always
    environment:
      POSTGRES_PORT: ${DATABASE_PORT}
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -h db
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - kc_network

  keycloak:
    image: ailushyk/auth-server:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=(Host(`auth.localhost`))"
      - "traefik.http.routers.keycloak.entrypoints=kc"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      KC_PROXY: edge
      KC_DB: postgres
      KC_DB_URL: "jdbc:postgresql://kc_db:5432/${POSTGRES_DB}"
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
#    command: start-dev --proxy-headers=xforwarded --http-enabled=true --hostname-strict=false --log-level=INFO --hostname-debug=true --import-realm
    command: start-dev --proxy-headers=xforwarded --http-enabled=true --hostname=auth.localhost --log-level=INFO --hostname-debug=true --import-realm
    networks:
      kc_network:
        aliases:
          - auth.localhost

  kc_db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    networks:
      - kc_network

networks:
  kc_network:
    driver: bridge

volumes:
  pgdata:
  keycloak_data:
  letsencrypt:
